{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","country","player","scores","list","scored","setScored","inputEl1","useRef","inputEl2","inputElchangeHandler","findScoreItem","find","item","current","value","toLowerCase","undefined","Container","className","Row","Col","placeholder","onChange","type","ref","ProgressBar","now","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wRA2DeA,MArDf,WACI,IADW,EAWIC,mBAVM,CACjB,CAACC,QAAS,YAAaC,OAAQ,eAAgBC,OAAQ,IACvD,CAACF,QAAS,WAAYC,OAAQ,iBAAkBC,OAAQ,IACxD,CAACF,QAAS,eAAgBC,OAAQ,aAAcC,OAAQ,IACxD,CAACF,QAAS,cAAeC,OAAQ,kBAAmBC,OAAQ,IAC5D,CAACF,QAAS,aAAcC,OAAQ,gBAAiBC,OAAQ,IACzD,CAACF,QAAS,aAAcC,OAAQ,mBAAoBC,OAAQ,IAC5D,CAACF,QAAS,QAASC,OAAQ,iBAAkBC,OAAQ,IACrD,CAACF,QAAS,QAASC,OAAQ,cAAeC,OAAQ,MAE/CC,EAXI,sBAYiBJ,mBAAS,GAZ1B,mBAYJK,EAZI,KAYIC,EAZJ,KAcLC,EAAWC,iBAAO,MAClBC,EAAWD,iBAAO,MAChBE,EAAuB,WAC3B,IAAIC,EAAgBP,EAAKQ,MAAK,SAASC,GACnC,OAAOA,EAAKZ,UAAYM,EAASO,QAAQC,MAAMC,eAAiBH,EAAKX,SAAWO,EAASK,QAAQC,MAAMC,iBAGzGV,OADgBW,IAAlBN,EACYA,EAAcR,OACd,IAEhB,OACE,6BACI,kBAACe,EAAA,EAAD,CAAWC,UAAU,OACrB,8CACE,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,+CACA,2BAAOC,YAAY,iBAAiBH,UAAU,QAAQI,SAAUb,EAAsBc,KAAK,OAAOC,IAAKlB,KAG3G,kBAACc,EAAA,EAAD,KACI,8CACA,2BAAOC,YAAY,uBAAuBH,UAAU,QAAQI,SAAUb,EAAsBc,KAAK,OAAOC,IAAKhB,KAGjH,kBAACY,EAAA,EAAD,eACYhB,EAEO,IAAXA,EACE,kBAACqB,EAAA,EAAD,CAAaC,IAAKtB,IAClB,QCtCNuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.70561661.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nfunction App() {\n    const initialValue = [\n        {country: 'australia', player: 'steven smith', scores: 40},\n        {country: 'zimbabwe', player: 'brendan taylor', scores: 80},\n        {country: 'south africa', player: 'dale steyn', scores: 60},\n        {country: 'new zealand', player: 'kane williamson', scores: 50},\n        {country: 'bangladesh', player: 'rubel hossain', scores: 10},\n        {country: 'bangladesh', player: 'mashrafe mortaza', scores: 20},\n        {country: 'india', player: 'shikhar dhawan', scores: 90},\n        {country: 'india', player: 'virat kohli', scores: 20}\n    ]\n    const [list] = useState(initialValue);\n    const [scored, setScored] = useState(0); \n\n    const inputEl1 = useRef(null);\n    const inputEl2 = useRef(null);\n      const inputElchangeHandler = () => {\n        let findScoreItem = list.find(function(item) {\n            return item.country === inputEl1.current.value.toLowerCase() && item.player === inputEl2.current.value.toLowerCase();\n        });\n        findScoreItem !== undefined\n        ? setScored(findScoreItem.scores)\n        : setScored(0)\n      }; \n    return (\n      <div>\n          <Container className=\"p-5\">\n          <h3>Cricket Scores</h3>\n            <Row>\n                <Col>\n                    <div>Country name: </div>\n                    <input placeholder=\"Example: India\" className=\"w-100\" onChange={inputElchangeHandler} type=\"text\" ref={inputEl1}/>\n                   \n                </Col>\n                <Col>\n                    <div>Player name: </div>\n                    <input placeholder=\"Example: virat kohli\" className=\"w-100\" onChange={inputElchangeHandler} type=\"text\" ref={inputEl2}/>\n                   \n                </Col>\n                <Col>\n                    Scores {scored}\n                    {\n                        scored !== 0\n                        ? <ProgressBar now={scored} />\n                        : ''\n                    }                    \n                </Col>\n            </Row>\n        </Container>\n    </div>\n    );\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}